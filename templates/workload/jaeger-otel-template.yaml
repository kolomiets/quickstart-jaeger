AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys OpenTelemetry Collector (TODO)

Parameters:
# Basic Configuration
  EnvironmentName:
    Type: String
# VPC parameters
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ID of your existing VPC (e.g., vpc-0343606e).
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Type: String  
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: String
    Default: ''
# Jaeger parameters
  ClusterName:
    Type: String
  ClusterArn:
    Type: String
  LoadBalancerArn:
    Type: String
  JaegerEndpoint:
    Type: String
# Otel Collector parameters  
  OpenTelemetryCollectorImage:
    Type: String
  OpenTelemetryCollectorVersion:
    Type: String
  MemoryBallastPercentage:
    Type: Number
  EnableZPages:
    Type: String
  EnablePprof:
    Type: String
  EnableSPM:
    Type: String
  CollectorCpu:
    Type: Number
  CollectorMemory:
    Type: Number
  MinCollectorCount:
    Type: Number
  MaxCollectorCount:
    Type: Number
# Prometheus parameters
  ExportMetrics:
    Type: String
    AllowedValues: [ 'Disabled', 'UseExistingWorkspace', 'CreateNewWorkspace' ]
  PrometheusWorkspaceArn: 
    Type: String
  PrometheusWriteEndpoint: 
    Type: String

Conditions:
  Using3AvailabilityZones:  !Not [!Equals [!Ref PrivateSubnet3ID, '']]
  EnableZPages: !Equals [!Ref EnableZPages, 'Yes']
  EnablePprof: !Equals [!Ref EnablePprof, 'Yes']
  EnableSPM: !Equals [!Ref EnableSPM, 'Yes']
  MemoryBallastEnabled: !Not [!Equals [!Ref MemoryBallastPercentage, 0]]
  ExportMetrics: !Not [!Equals [!Ref ExportMetrics, 'Disabled']]

Resources:

  BaseConfigurationParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Jaeger OpenTelemetry Collector base configuration
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/otel-config-base"
      Type: String
      Value:
        Fn::Base64:
          Fn::Sub:
            - |           
              extensions:
                memory_ballast:
                  size_in_percentage: ${MemoryBallastPercentage}
                pprof:
                  endpoint: 0.0.0.0:1777
                zpages:
                  endpoint: 0.0.0.0:55679
                sigv4auth:
              receivers:
                otlp:
                  protocols:
                    grpc:
                    http:
              processors:
                memory_limiter:
                  check_interval: 1s
                  limit_percentage: 80
                  spike_limit_percentage: 25
                batch:
                  timeout: 1s
              exporters:
                jaeger:
                  endpoint: ${JaegerEndpoint}:14250
                  tls:
                    insecure: true
              service:
                extensions: [${Extensions}]
                pipelines:
                  traces:
                    receivers: [otlp]
                    processors: [memory_limiter, batch]
                    exporters: [jaeger]
            - Extensions: !Join
                - ','
                - - !If [MemoryBallastEnabled, memory_ballast, !Ref 'AWS::NoValue']
                  - !If [EnablePprof, pprof, !Ref 'AWS::NoValue']
                  - !If [EnableZPages, zpages, !Ref 'AWS::NoValue']
                  - !If [ExportMetrics, sigv4auth, !Ref 'AWS::NoValue']

  MetricsConfigurationParameter:
    Type: AWS::SSM::Parameter
    Condition: ExportMetrics
    Properties:
      Description: Jaeger OpenTelemetry Collector metrics configuration
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/otel-config-metrics"
      Type: String
      Value:
        Fn::Base64:
          Fn::Sub: |  
            receivers:
              # scrape Otel Collector's own metrics
              prometheus:
                config:
                  scrape_configs:
                  - job_name: 'otelcol'
                    scrape_interval: 10s
                    static_configs:
                    - targets: ['localhost:8888']
                    metric_relabel_configs:
                      - source_labels: [ __name__ ]
                        regex: '.*grpc_io.*'
                        action: drop  
            exporters:
              prometheusremotewrite:
                endpoint: ${PrometheusWriteEndpoint}
                auth:
                  authenticator: sigv4auth
            service:
              telemetry:
                metrics:
                  address: "localhost:8888"
              pipelines:
                metrics/collector:
                  receivers: [prometheus]
                  processors: [batch]
                  exporters: [prometheusremotewrite]

  SPMConfigurationParameter:
    Type: AWS::SSM::Parameter
    Condition: EnableSPM
    Properties:
      Description: Jaeger OpenTelemetry Collector SPM configuration
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/otel-config-spm"
      Type: String
      Value:
        Fn::Base64: |
          receivers:
            otlp/spanmetrics:
              protocols:
                grpc:
                  endpoint: "localhost:55677"
            # dummy receiver - a pipeline is required to have one.
            otlp/dummy:
              protocols:
                grpc:
                  endpoint: "localhost:12345"
          processors:
            spanmetrics:
              metrics_exporter: otlp/spanmetrics  
          exporters:
            otlp/spanmetrics:
              endpoint: "localhost:55677"
              tls:
                insecure: true
            file/devnull:
              path: /dev/null
          service:
            pipelines:
              traces/producespanmetrics:
                receivers: [otlp]
                processors: [spanmetrics]
                exporters: [file/devnull]
              metrics/producespanmetrics:
                receivers: [otlp/dummy]
                exporters: [otlp/spanmetrics]
              metrics/exportspanmetrics:
                receivers: [otlp/spanmetrics]
                processors: [batch]
                exporters: [prometheusremotewrite]

# Target Groups
  TargetGroup4317:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 4317
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Name
          Value: !Sub jaeger-4317-${EnvironmentName}-otel

  TargetGroup1777:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EnablePprof
    Properties:
      Port: 1777
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Name
          Value: !Sub jaeger-1777-${EnvironmentName}-otel-pprof

  TargetGroup55679:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EnableZPages
    Properties:
      Port: 55679
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Name
          Value: !Sub jaeger-55679-${EnvironmentName}-otel-zpages

# Listeners
  Listener4317:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup4317
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 4317
      Protocol: TCP

  Listener1777:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EnablePprof
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup1777
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 1777
      Protocol: TCP

  Listener55679:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EnableZPages
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup55679
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 55679
      Protocol: TCP

# Roles
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - !If 
          - ExportMetrics
          - PolicyName: metrics-export-task-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Action: aps:RemoteWrite
                  Effect: Allow
                  Resource: !Ref PrometheusWorkspaceArn
          - !Ref "AWS::NoValue"
    
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyName: jaeger-otel-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !GetAtt LogGroup.Arn
              - Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Effect: Allow
                Resource: 
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${BaseConfigurationParameter}"
                  - !If
                    - ExportMetrics
                    - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MetricsConfigurationParameter}"
                    - !Ref 'AWS::NoValue' 
                  - !If
                    - EnableSPM
                    - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SPMConfigurationParameter}"
                    - !Ref 'AWS::NoValue'  
                
# Task Definition
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub quickstart-jaeger-otel-${EnvironmentName}
      RequiresCompatibilities: [ FARGATE ]
      # see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html
      Cpu: !Sub "${CollectorCpu}"
      Memory: !Sub "${CollectorMemory}"
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Volumes:
        - Name: otel-conf-volume
          Host: {}
      ContainerDefinitions:
        - Name: jaeger-otel
          Essential: true
          Image: !Sub ${OpenTelemetryCollectorImage}:${OpenTelemetryCollectorVersion}
          Command:
            - --config=/otel/conf/base.conf
            - !If [ExportMetrics, --config=/otel/conf/metrics.conf, !Ref 'AWS::NoValue']
            - !If [EnableSPM, --config=/otel/conf/spm.conf, !Ref 'AWS::NoValue']
          DependsOn:
          - Condition: COMPLETE
            ContainerName: jaeger-otel-config
          PortMappings:
            - ContainerPort: 4317 # Default endpoint for OpenTelemetry receiver
              Protocol: tcp
            - !If 
              - EnablePprof
              - ContainerPort: 1777 # pprof port
                Protocol: tcp
              - !Ref "AWS::NoValue"
            - !If 
              - EnableZPages
              - ContainerPort: 55679 # zpages port
                Protocol: tcp
              - !Ref "AWS::NoValue"
          MountPoints:
            - ContainerPath: /otel/conf
              SourceVolume: otel-conf-volume
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: jaeger-otel
              awslogs-region: !Ref AWS::Region
        - Name: jaeger-otel-config
          Image: bash
          Essential: false
          Command:
            - -c
            - !Join
              - ';'
              - - "echo $OTEL_CONFIG_BASE | base64 -d - | tee /otel/conf/base.conf"
                - !If [ExportMetrics, "echo $OTEL_CONFIG_METRICS | base64 -d - | tee /otel/conf/metrics.conf", !Ref 'AWS::NoValue']
                - !If [EnableSPM, "echo $OTEL_CONFIG_SPM | base64 -d - | tee /otel/conf/spm.conf", !Ref 'AWS::NoValue']
          Secrets:
            - Name: OTEL_CONFIG_BASE
              ValueFrom: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${BaseConfigurationParameter}"
            - !If 
              - ExportMetrics
              - Name: OTEL_CONFIG_METRICS
                ValueFrom: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MetricsConfigurationParameter}"
              - !Ref "AWS::NoValue"
            - !If 
              - EnableSPM
              - Name: OTEL_CONFIG_SPM
                ValueFrom: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SPMConfigurationParameter}"
              - !Ref "AWS::NoValue"
          MountPoints:
            - ContainerPath: /otel/conf
              SourceVolume: otel-conf-volume
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: jaeger-otel-config
              awslogs-region: !Ref AWS::Region

# Service
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: jaeger-otel
      Cluster: !Ref ClusterArn
      DesiredCount: !Ref MinCollectorCount
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: jaeger-otel
          ContainerPort: 4317
          TargetGroupArn: !Ref TargetGroup4317
        - !If 
          - EnablePprof
          - ContainerName: jaeger-otel
            ContainerPort: 1777
            TargetGroupArn: !Ref TargetGroup1777
          - !Ref "AWS::NoValue"
        - !If 
          - EnableZPages
          - ContainerName: jaeger-otel
            ContainerPort: 55679
            TargetGroupArn: !Ref TargetGroup55679
          - !Ref "AWS::NoValue"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt ServiceSecurityGroup.GroupId
          Subnets:
            - !Ref PrivateSubnet1ID
            - !Ref PrivateSubnet2ID
            - !If [Using3AvailabilityZones, !Ref PrivateSubnet3ID, !Ref 'AWS::NoValue']
      TaskDefinition: !Ref TaskDefinition
      Tags:
        # A necessary trick to force CloudFormation to wait until all listeners are created.
        # We extract listener ID from ARN, as not all characters are allowed in tags. ARN format: 
        # arn:{partition}:elasticloadbalancing:{region}:{account-id}:listener/net/{nlb-name}/{nlb-id}/{listener-id}
        - Key: ListenerIds
          Value: !Join
            - ' '
            - - !Select [4, !Split ['/', !Select [5, !Split [':', !Ref  Listener4317]]]]
              - !If [EnablePprof, !Select [4, !Split ['/', !Select [5, !Split [':', !Ref Listener1777]]]], !Ref 'AWS::NoValue']
              - !If [EnableZPages, !Select [4, !Split [ '/', !Select [5, !Split [':', !Ref Listener55679]]]], !Ref 'AWS::NoValue']

# Scaling Policies

  ServiceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCollectorCount
      MinCapacity: !Ref MinCollectorCount
      ResourceId: !Sub "service/${ClusterName}/${Service.Name}"
      RoleARN: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceCPUAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: True # consider memory-based scaling more important
        TargetValue: 75 
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ServiceMemoryAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: MemoryAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75 
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

# Security Group

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: quickstart-jaeger/jaeger/jaeger-otel/SecurityGroup
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCIDR
          Description: Allow ECS Service access (port 4317) from within VPC
          IpProtocol: tcp
          FromPort: 4317
          ToPort: 4317
        - !If 
          - EnablePprof
          - CidrIp: !Ref VPCCIDR
            Description: Allow ECS Service access (port 1777) from within VPC
            IpProtocol: tcp
            FromPort: 1777
            ToPort: 1777
          - !Ref "AWS::NoValue"
        - !If 
          - EnableZPages
          - CidrIp: !Ref VPCCIDR
            Description: Allow ECS Service access (port 55679) from within VPC
            IpProtocol: tcp
            FromPort: 55679
            ToPort: 55679
          - !Ref "AWS::NoValue"