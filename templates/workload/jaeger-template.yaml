AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a Jaeger distributed tracing backend (TODO)

Parameters:
# Basic Configuration
  EnvironmentName:
    Type: String

# VPC parameters
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ID of your existing VPC (e.g., vpc-0343606e).
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
    Type: String  
  PublicSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the public subnet in Availability Zone 1 of your existing VPC (e.g., subnet-a0246ccd).
  PublicSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the public subnet in Availability Zone 2 of your existing VPC (e.g., subnet-b1236eea).
  PublicSubnet3ID:
    Type: String
    Description: ID of the public subnet in Availability Zone 3 of your existing VPC (e.g., subnet-c3456aba).
    Default: ''
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the private subnet in Availability Zone 1 of your existing VPC (e.g., subnet-fe9a8b32).
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the private subnet in Availability Zone 2 of your existing VPC (e.g., subnet-be8b01ea).
  PrivateSubnet3ID:
    Type: String
    Description: ID of the private subnet in Availability Zone 3 of your existing VPC (e.g., subnet-abd39039).
    Default: ''
  CreateVpcEndpoints:
    Type: String
    AllowedValues: [ 'Yes', 'No' ]
    Default: 'No'
    Description: Choose "Yes" to keep traffic between Jaeger and AWS services inside VPC.

# Jaeger parameters
  JaegerVersion:
    Type: String
  StorageBackend:
    Type: String
    AllowedValues: [ 'InMemory', 'Elasticsearch' ]
  InternalLoadBalancer:
    Type: String
    AllowedValues: [ 'Yes', 'No' ]
  OpenTelemetryCollector:
    Type: String
    AllowedValues: [ 'Yes', 'No' ]

# Otel Collector parameters  
  OpenTelemetryCollectorImage:
    Type: String
  OpenTelemetryCollectorVersion:
    Type: String
  MemoryBallastPercentage:
    Type: Number
  EnableZPages:
    Type: String
  EnablePprof:
    Type: String
  EnableSPM:
    Type: String
  CollectorCpu:
    Type: Number
  CollectorMemory:
    Type: Number
  MinCollectorCount:
    Type: Number
  MaxCollectorCount:
    Type: Number

# Elasticsearch parameters
  ESEngineVersion: 
    Type: String
  ESInstanceCount:
    Type: Number
  ESInstanceType:
    Type: String
  ESVolumeSize:
    Type: Number
  ESVolumeType:
    Type: String
  ESDependenciesJobSchedule: 
    Type: String
  ESDependenciesJobTimeRange: 
    Type: String

# Metrics Scrape parameters
  EnableContainerInsights:
    Type: String
    AllowedValues: [ 'Yes', 'No' ]
  ExportMetrics:
    Type: String
    AllowedValues: [ 'Disabled', 'UseExistingWorkspace', 'CreateNewWorkspace' ]
  PrometheusWorkspaceId:
    Type: String
  ScrapeIntervalSeconds:  
    Type: Number
  ScrapeTimeoutSeconds:
    Type: Number
  ClusterMetricsCollectionInterval: 
    Type: Number

# DNS parameters
  DomainName:
    Type: String
  SubdomainName:
    Type: String
  PublicDNS:
    Type: String
    AllowedValues: [ 'Disabled', 'UseExisting', 'CreateNew' ]
  PublicHostedZoneId:
    Type: String
  PrivateDNS:
    Type: String
    AllowedValues: [ 'Disabled', 'UseExisting', 'CreateNew' ]
  PrivateHostedZoneId:
    Type: String
  Certificate:
    Type: String
    AllowedValues: [ 'Disabled', 'UseExisting', 'CreateNew' ]
  CertificateArn:
    Type: String

# Quickstart location parameters
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Type: String
  QSS3BucketRegion:
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    Type: String

Conditions:
  Using3AvailabilityZones:  !Not [!Equals [!Ref PrivateSubnet3ID, '']]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  InternalLoadBalancer: !Equals [!Ref InternalLoadBalancer, 'Yes']
  ExportMetrics: !Not [!Equals [!Ref ExportMetrics, 'Disabled']]
  EnableContainerInsights: !Equals [!Ref EnableContainerInsights, 'Yes']
  OpenTelemetryCollector: !Equals [!Ref OpenTelemetryCollector, 'Yes']
  CreateVpcEndpoints: !Equals [!Ref CreateVpcEndpoints, 'Yes']

  InMemoryStorage: !Equals [!Ref StorageBackend, 'InMemory']
  ElasticsearchStorage: !Equals [!Ref StorageBackend, 'Elasticsearch']

  HttpsProtocol: !Not [!Equals [!Ref Certificate, 'Disabled']]
  CustomDomainName: !Not [!Equals [!Ref PublicDNS, 'Disabled']]

Resources:

  Endpoints:
    Type: AWS::CloudFormation::Stack
    Condition: CreateVpcEndpoints
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/jaeger-endpoints-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        VPCID: !Ref VPCID
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub jaeger-cluster-${EnvironmentName}
      ClusterSettings:
        - Name: containerInsights
          Value: !If [EnableContainerInsights, enabled, disabled]

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: !If [InternalLoadBalancer, internal, internet-facing] 
      Subnets:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
        - !If [Using3AvailabilityZones, !Ref PublicSubnet3ID, !Ref 'AWS::NoValue']
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"

  MetricsBackendStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/jaeger-metrics-backend-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        ExportMetrics: !Ref ExportMetrics
        PrometheusWorkspaceId: !Ref PrometheusWorkspaceId

  OtelStack:
    Type: AWS::CloudFormation::Stack
    Condition: OpenTelemetryCollector
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/jaeger-otel-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        # Basic Configuration
        EnvironmentName: !Ref EnvironmentName
        # VPC parameters
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID
        # Jaeger parameters
        ClusterName: !Ref Cluster
        ClusterArn: !GetAtt Cluster.Arn
        LoadBalancerArn: !Ref LoadBalancer
        JaegerEndpoint: !If [CustomDomainName, !Sub '${SubdomainName}.${DomainName}', !GetAtt LoadBalancer.DNSName]
        # Otel Collector parameters  
        OpenTelemetryCollectorImage: !Ref OpenTelemetryCollectorImage
        OpenTelemetryCollectorVersion: !Ref OpenTelemetryCollectorVersion
        MemoryBallastPercentage: !Ref MemoryBallastPercentage
        EnableZPages: !Ref EnableZPages
        EnablePprof: !Ref EnablePprof
        EnableSPM: !Ref EnableSPM
        CollectorCpu: !Ref CollectorCpu
        CollectorMemory: !Ref CollectorMemory
        MinCollectorCount: !Ref MinCollectorCount
        MaxCollectorCount: !Ref MaxCollectorCount
        # Prometheus parameterss
        ExportMetrics: !Ref ExportMetrics
        PrometheusWorkspaceArn: !GetAtt MetricsBackendStack.Outputs.PrometheusWorkspaceArn
        PrometheusWriteEndpoint: !GetAtt MetricsBackendStack.Outputs.PrometheusWriteEndpoint

  DNSStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/jaeger-dns-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VPCID: !Ref VPCID
        DomainName: !Ref DomainName
        SubdomainName: !Ref SubdomainName
        PublicDNS: !Ref PublicDNS
        PublicHostedZoneId: !Ref PublicHostedZoneId
        PrivateDNS: !Ref PrivateDNS
        PrivateHostedZoneId: !Ref PrivateHostedZoneId
        Certificate: !Ref Certificate
        CertificateArn: !Ref CertificateArn
        TargetHostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        TargetDNSName: !GetAtt LoadBalancer.DNSName

  InMemoryStack:
    Type: AWS::CloudFormation::Stack
    Condition: InMemoryStorage
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/jaeger-storage-inmemory-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        # Basic Configuration
        EnvironmentName: !Ref EnvironmentName
        # VPC parameters
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID
        # Jaeger parameters
        ClusterArn: !GetAtt Cluster.Arn
        LoadBalancerArn: !Ref LoadBalancer
        LoadBalancerDomainName: !GetAtt LoadBalancer.DNSName
        JaegerVersion: !Ref JaegerVersion
        ExportMetrics: !Ref ExportMetrics 
        EnableSPM: !Ref EnableSPM
        CertificateArn: !GetAtt DNSStack.Outputs.CertificateArn
        # Prometheus parameters
        PrometheusWorkspaceId: !GetAtt MetricsBackendStack.Outputs.PrometheusWorkspaceId

  ElasticsearchStack:
    Type: AWS::CloudFormation::Stack
    Condition: ElasticsearchStorage
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/jaeger-storage-elasticsearch-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        # Basic Configuration
        EnvironmentName: !Ref EnvironmentName
        # VPC parameters
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID
        # Jaeger parameters
        ClusterArn: !GetAtt Cluster.Arn
        LoadBalancerArn: !Ref LoadBalancer
        LoadBalancerDomainName: !GetAtt LoadBalancer.DNSName
        JaegerVersion: !Ref JaegerVersion
        ExportMetrics: !Ref ExportMetrics
        CertificateArn: !GetAtt DNSStack.Outputs.CertificateArn
        # Elasticsearch parameters
        ESEngineVersion: !Ref ESEngineVersion 
        ESInstanceCount: !Ref ESInstanceCount
        ESInstanceType: !Ref ESInstanceType
        ESVolumeSize: !Ref ESVolumeSize
        ESVolumeType: !Ref ESVolumeType
        ESDependenciesJobSchedule: !Ref ESDependenciesJobSchedule 
        ESDependenciesJobTimeRange: !Ref ESDependenciesJobTimeRange
    
  MetricsStack:
    Type: AWS::CloudFormation::Stack
    Condition: ExportMetrics
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/workload/jaeger-metrics-template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VPCID: !Ref VPCID
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        PrivateSubnet3ID: !Ref PrivateSubnet3ID
        ClusterArn: !GetAtt Cluster.Arn
        PrometheusWorkspaceArn: !GetAtt MetricsBackendStack.Outputs.PrometheusWorkspaceArn
        PrometheusWriteEndpoint: !GetAtt MetricsBackendStack.Outputs.PrometheusWriteEndpoint
        ScrapeTargets:
          !If 
            - InMemoryStorage
            - !GetAtt InMemoryStack.Outputs.ScrapeTargets
            - !If 
                - ElasticsearchStorage
                - !GetAtt ElasticsearchStack.Outputs.ScrapeTargets
                - !Ref "AWS::NoValue"
        ScrapeIntervalSeconds: !Ref ScrapeIntervalSeconds
        ScrapeTimeoutSeconds: !Ref ScrapeTimeoutSeconds
        ClusterMetricsCollectionInterval: !Ref ClusterMetricsCollectionInterval

# SSM parameters to simplify further integrations
  VPCIDParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Jaeger VPC ID
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/vpc/id"
      Type: String
      Value: !Ref VPCID
  VPCCIDRParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Jaeger VPC CIDR
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/vpc/cidr"
      Type: String
      Value: !Ref VPCCIDR
  VPCPublicSubnetsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Jaeger VPC Public Subnets
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/vpc/public-subnets"
      Type: String
      Value: !If 
        - Using3AvailabilityZones
        - !Join [ ',', [ !Ref PublicSubnet1ID, !Ref PublicSubnet2ID, !Ref PublicSubnet3ID ] ]
        - !Join [ ',', [ !Ref PublicSubnet1ID, !Ref PublicSubnet2ID ] ]
  VPCPrivateSubnetsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Jaeger VPC Private Subnets
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/vpc/private-subnets"
      Type: String
      Value: !If
        - Using3AvailabilityZones
        - !Join [ ',', [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ] ]
        - !Join [ ',', [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ] ]
  DomainNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Jaeger domain name
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/load-balancer/domain"
      Type: String
      Value: !If [CustomDomainName, !Sub '${SubdomainName}.${DomainName}', !GetAtt LoadBalancer.DNSName]
  DomainURLParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Jaeger URL
      Name: !Sub "/quickstart/jaeger/${EnvironmentName}/load-balancer/url"
      Type: String
      Value: !Sub 
        - '${Protocol}://${JaegerDomainName}'
        - Protocol: !If [HttpsProtocol, https, http]
          JaegerDomainName: !If [CustomDomainName, !Sub '${SubdomainName}.${DomainName}', !GetAtt LoadBalancer.DNSName]

Outputs:
  JaegerURL:
    Value: !Sub 
      - '${Protocol}://${JaegerDomainName}'
      - Protocol: !If [HttpsProtocol, https, http]
        JaegerDomainName: !If [CustomDomainName, !Sub '${SubdomainName}.${DomainName}', !GetAtt LoadBalancer.DNSName]