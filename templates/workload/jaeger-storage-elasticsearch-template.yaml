AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys Jaeger ECS service configured to use Elasticsearch storage (TODO)

Parameters:
# Basic Configuration
  EnvironmentName:
    Type: String
# VPC parameters
  VPCID:
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Type: String  
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Type: String
    Default: ''
# Jaeger parameters
  ClusterArn:
    Type: String
  LoadBalancerArn:
    Type: String
  LoadBalancerDomainName:
    Type: String
  JaegerVersion:
    Type: String
  ExportMetrics:
    Type: String
    AllowedValues: [ 'Yes', 'No' ]
  CertificateArn:
    Type: String
# Elasticsearch parameters
  ESEngineVersion: 
    Type: String
  ESInstanceCount:
    Type: Number
  ESInstanceType:
    Type: String
  ESVolumeSize:
    Type: Number
  ESVolumeType:
    Type: String
  ESDependenciesJobSchedule: 
    Type: String
  ESDependenciesJobTimeRange: 
    Type: String

Conditions:
  Using3AvailabilityZones:  !Not [!Equals [!Ref PrivateSubnet3ID, '']]
  ExportMetrics: !Equals [!Ref ExportMetrics, 'Yes']
  CertificateProvided: !Not [!Equals [!Ref CertificateArn, '']]
  NoCertificateProvided: !Equals [!Ref CertificateArn, '']

Resources:

# Target Groups

  TargetGroup14250:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 14250
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub jaeger-14250-${EnvironmentName}

  TargetGroup14268:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 14268
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub jaeger-14268-${EnvironmentName}

  TargetGroup14269:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: ExportMetrics
    Properties:
      Port: 14269
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub jaeger-14269-${EnvironmentName}

  TargetGroup16687:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: ExportMetrics
    Properties:
      Port: 16687
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub jaeger-16687-${EnvironmentName}

  TargetGroupHttp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: NoCertificateProvided
    Properties:
      Port: 80
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub jaeger-http-${EnvironmentName}

  TargetGroupHttps:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CertificateProvided
    Properties:
      Port: 443
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub jaeger-https-${EnvironmentName}

# Listeners

  Listener14250:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup14250
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 14250
      Protocol: TCP

  Listener14268:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup14268
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 14268
      Protocol: TCP

  Listener14269:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ExportMetrics
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup14269
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 14269
      Protocol: TCP

  Listener16687:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ExportMetrics
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup16687
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 16687
      Protocol: TCP

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: NoCertificateProvided
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroupHttp
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 80
      Protocol: TCP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CertificateProvided
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroupHttps
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerArn
      Port: 443
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !Ref CertificateArn

# Search Domain

  SearchDomainSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for domain domain
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCIDR
          Description: Allow ES domain access from within VPC
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  SearchDomainMasterUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        ExcludeCharacters: "{}'\\*[]()`"
        GenerateStringKey: password
        SecretStringTemplate: '{"username":"master-user"}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  SearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub jaeger-traces-${EnvironmentName}
      EngineVersion: !Ref ESEngineVersion
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !Ref ESInstanceCount
        InstanceType: !Ref ESInstanceType
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: !If [Using3AvailabilityZones, 3, 2]
      VPCOptions:
        SecurityGroupIds:
          - !GetAtt SearchDomainSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet1ID
          - !Ref PrivateSubnet2ID
          - !If [Using3AvailabilityZones, !Ref PrivateSubnet3ID, !Ref 'AWS::NoValue']
      AccessPolicies: 
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/jaeger-traces/*"
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: master-user
          MasterUserPassword: !Sub "{{resolve:secretsmanager:${SearchDomainMasterUserSecret}:SecretString:password::}}"
      CognitoOptions:
        Enabled: false
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-0-2019-07
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !Ref ESVolumeSize
        VolumeType: !Ref ESVolumeType
      EncryptionAtRestOptions:
        Enabled: true
      LogPublishingOptions: {}
      NodeToNodeEncryptionOptions:
        Enabled: true
    UpdatePolicy:
      EnableVersionUpgrade: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

# Collector

  CollectorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  CollectorTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: jaeger-collector-task-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - es:ESHttpGet
                  - es:ESHttpHead
                  - es:ESHttpDelete
                  - es:ESHttpPost
                  - es:ESHttpPut
                  - es:ESHttpPatch
                Effect: Allow
                Resource:  
                  - !GetAtt SearchDomain.Arn
                  - !Sub "${SearchDomain.Arn}/*"

  CollectorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: jaeger-collector-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !GetAtt CollectorLogGroup.Arn
              - Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Effect: Allow
                Resource: !Ref SearchDomainMasterUserSecret

  CollectorTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub quickstart-jaeger-collector-${EnvironmentName}
      ContainerDefinitions:
        - Name: jaeger-collector
          Environment:
            - Name: SPAN_STORAGE_TYPE
              Value: elasticsearch
            - Name: ES_SERVER_URLS
              Value: !Sub "https://${SearchDomain.DomainEndpoint}"
            - Name: ES_USERNAME
              Value: master-user
          Essential: true
          Image: !Sub jaegertracing/jaeger-collector:${JaegerVersion}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CollectorLogGroup
              awslogs-stream-prefix: jaeger-collector
              awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 9411
              Protocol: tcp
            - ContainerPort: 14250
              Protocol: tcp
            - ContainerPort: 14268
              Protocol: tcp
            - ContainerPort: 14269
              Protocol: tcp
          Secrets:
            - Name: ES_PASSWORD
              ValueFrom: !Sub "${SearchDomainMasterUserSecret}:password::"
      Cpu: "1024"
      TaskRoleArn: !GetAtt CollectorTaskRole.Arn
      ExecutionRoleArn: !GetAtt CollectorExecutionRole.Arn
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      
  CollectorService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterArn
      ServiceName: jaeger-collector
      TaskDefinition: !Ref CollectorTaskDefinition
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: jaeger-collector
          ContainerPort: 14250
          TargetGroupArn: !Ref TargetGroup14250
        - ContainerName: jaeger-collector
          ContainerPort: 14268
          TargetGroupArn: !Ref TargetGroup14268
        - !If 
          - ExportMetrics
          - ContainerName: jaeger-collector
            ContainerPort: 14269
            TargetGroupArn: !Ref TargetGroup14269
          - !Ref "AWS::NoValue"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !GetAtt CollectorServiceSecurityGroup.GroupId
          Subnets:
            - !Ref PrivateSubnet1ID
            - !Ref PrivateSubnet2ID
            - !If [Using3AvailabilityZones, !Ref PrivateSubnet3ID, !Ref 'AWS::NoValue']

  CollectorServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: quickstart-jaeger/jaeger/jaeger-collector-service/SecurityGroup
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCIDR
          Description: Allow ECS Service access (port 14250) from within VPC
          IpProtocol: tcp
          FromPort: 14250
          ToPort: 14250
        - CidrIp: !Ref VPCCIDR
          Description: Allow ECS Service access (port 14268) from within VPC
          IpProtocol: tcp
          FromPort: 14268
          ToPort: 14268
        - !If 
          - ExportMetrics
          - CidrIp: !Ref VPCCIDR
            Description: Allow ECS Service access (port 14269) from within VPC
            IpProtocol: tcp
            FromPort: 14269
            ToPort: 14269
          - !Ref "AWS::NoValue"

# Query

  QueryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  QueryTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"

  QueryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: jaeger-query-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !GetAtt QueryLogGroup.Arn
              - Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Effect: Allow
                Resource: !Ref SearchDomainMasterUserSecret

  QueryTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub quickstart-jaeger-query-${EnvironmentName}
      ContainerDefinitions:
        - Name: jaeger-query
          Environment:
            - Name: SPAN_STORAGE_TYPE
              Value: elasticsearch
            - Name: ES_SERVER_URLS
              Value: !Sub "https://${SearchDomain.DomainEndpoint}"
            - Name: ES_USERNAME
              Value: master-user
          Essential: true
          Image: !Sub jaegertracing/jaeger-query:${JaegerVersion}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref QueryLogGroup
              awslogs-stream-prefix: jaeger-query
              awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 16685
              Protocol: tcp
            - ContainerPort: 16686
              Protocol: tcp
            - ContainerPort: 16687
              Protocol: tcp
          Secrets:
            - Name: ES_PASSWORD
              ValueFrom: !Sub "${SearchDomainMasterUserSecret}:password::"
      Cpu: "1024"
      TaskRoleArn: !GetAtt QueryTaskRole.Arn
      ExecutionRoleArn: !GetAtt QueryExecutionRole.Arn
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  QueryService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterArn
      ServiceName: jaeger-query
      TaskDefinition: !Ref QueryTaskDefinition
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: jaeger-query
          ContainerPort: 16686
          TargetGroupArn: !If [CertificateProvided, !Ref TargetGroupHttps, !Ref TargetGroupHttp]
        - !If 
          - ExportMetrics
          - ContainerName: jaeger-query
            ContainerPort: 16687
            TargetGroupArn: !Ref TargetGroup16687
          - !Ref "AWS::NoValue"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt QueryServiceSecurityGroup.GroupId
          Subnets:
            - !Ref PrivateSubnet1ID
            - !Ref PrivateSubnet2ID
            - !If [Using3AvailabilityZones, !Ref PrivateSubnet3ID, !Ref 'AWS::NoValue']

  QueryServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: quickstart-jaeger/jaeger/jaeger-query-service/SecurityGroup
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCIDR
          Description: Allow ECS Service access (16686) from within VPC
          IpProtocol: tcp
          FromPort: 16686
          ToPort: 16686
        - !If 
          - ExportMetrics
          - CidrIp: !Ref VPCCIDR
            Description: Allow ECS Service access (16687) from within VPC
            IpProtocol: tcp
            FromPort: 16687
            ToPort: 16687
          - !Ref "AWS::NoValue"


# Dependencies

  DependenciesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  DependensciesTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"

  DependenciesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: jaeger-dependencies-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !GetAtt DependenciesLogGroup.Arn
              - Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Effect: Allow
                Resource: !Ref SearchDomainMasterUserSecret

  DependenciesTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub quickstart-jaeger-dependencies-${EnvironmentName}
      ContainerDefinitions:
        - Name: jaeger-dependencies
          Image: jaegertracing/spark-dependencies:latest
          Essential: true
          Environment:
            - Name: STORAGE
              Value: elasticsearch
            - Name: ES_NODES
              # port has to be specified explicitly, otherwise default 9200 will be used
              Value: !Sub "https://${SearchDomain.DomainEndpoint}:443" 
            - Name: ES_USERNAME
              Value: master-user
            - Name: ES_TIME_RANGE
              Value: !Ref ESDependenciesJobTimeRange
          Secrets:
            - Name: ES_PASSWORD
              ValueFrom: !Sub "${SearchDomainMasterUserSecret}:password::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DependenciesLogGroup
              awslogs-stream-prefix: jaeger-dependencies
              awslogs-region: !Ref AWS::Region
      Cpu: "1024"
      TaskRoleArn: !GetAtt DependensciesTaskRole.Arn
      ExecutionRoleArn: !GetAtt DependenciesExecutionRole.Arn
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  DependenciesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: quickstart-jaeger/jaeger/jaeger-dependencies-job/SecurityGroup
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow VPC outbound traffic by default
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535

  DependenciesTaskSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: jaeger-dependencies-scheduler-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ecs:RunTask
                Effect: Allow
                Resource:  
                  - !Ref DependenciesTaskDefinition
                Condition:
                  ArnEquals:
                    "ecs:cluster": !Ref ClusterArn
              - Action:
                  - iam:PassRole
                Effect: Allow
                Resource:  
                  - "*"
                Condition:
                  StringLike:
                    "iam:PassedToService": ecs-tasks.amazonaws.com

  DependenciesJobTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Jaeger Dependencies trigger according to the specified schedule
      ScheduleExpression: !Sub "cron(${ESDependenciesJobSchedule})"
      State: ENABLED
      Targets:
      - Id: jaeger-dependencies-builder-job
        Arn: !Ref ClusterArn
        RoleArn: !GetAtt DependenciesTaskSchedulerRole.Arn
        EcsParameters:
          TaskDefinitionArn: !Ref DependenciesTaskDefinition
          TaskCount: 1
          LaunchType: 'FARGATE'
          PlatformVersion: 'LATEST'
          NetworkConfiguration:
            AwsVpcConfiguration:
              AssignPublicIp: DISABLED
              SecurityGroups:
                - !GetAtt DependenciesSecurityGroup.GroupId
              Subnets:
                - !Ref PrivateSubnet1ID
                - !Ref PrivateSubnet2ID
                - !If [Using3AvailabilityZones, !Ref PrivateSubnet3ID, !Ref 'AWS::NoValue']

Outputs:
  ScrapeTargets:
    Value: !Sub "${LoadBalancerDomainName}:14269,${LoadBalancerDomainName}:16687"